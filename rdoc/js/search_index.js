var search_data = {"index":{"searchIndex":["urbanopt","reporting","defaultreports","constructioncost","date","distributedgeneration","enduse","enduses","featurereport","generator","location","powerdistribution","program","qaqc","reportingperiod","scenariopowerdistribution","scenariopowerdistributioncost","scenarioreport","solarpv","storage","thermalstorage","timeseriescsv","validator","wind","extension","add_capacitor()","add_costs_per_equipment()","add_equipment()","add_feature_report()","add_generator()","add_line()","add_outputs()","add_program()","add_pv()","add_qaqc_flags()","add_result()","add_storage()","add_substation()","add_tech()","add_timeseries_csv()","add_values()","add_values()","add_values()","add_violation_summary()","add_wind()","csv_headers()","csv_path()","defaults()","defaults()","defaults()","defaults()","defaults()","defaults()","defaults()","defaults()","defaults()","defaults()","defaults()","defaults()","defaults()","defaults()","defaults()","doc_templates_dir()","files_dir()","files_dir()","from_simulation_dir()","get_data()","json_path()","load_data()","load_scenario_csv_schema_headers()","logger()","max_value()","measures_dir()","merge_construction_cost()","merge_construction_costs()","merge_distributed_generation()","merge_end_use!()","merge_end_uses!()","merge_power_distribution()","merge_reporting_period()","merge_reporting_periods()","merge_thermal_storage()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","reload_data()","run_dir_name()","save()","save()","save_csv_report()","save_data()","save_feature_report()","save_json_report()","schema()","schema_file()","schema_valid?()","schema_validation_errors()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","to_hash()","validate()","changelog","contributing","rdoc_main","building_loads.csv","scenario_csv_columns","scenario_schema.json"],"longSearchIndex":["urbanopt","urbanopt::reporting","urbanopt::reporting::defaultreports","urbanopt::reporting::defaultreports::constructioncost","urbanopt::reporting::defaultreports::date","urbanopt::reporting::defaultreports::distributedgeneration","urbanopt::reporting::defaultreports::enduse","urbanopt::reporting::defaultreports::enduses","urbanopt::reporting::defaultreports::featurereport","urbanopt::reporting::defaultreports::generator","urbanopt::reporting::defaultreports::location","urbanopt::reporting::defaultreports::powerdistribution","urbanopt::reporting::defaultreports::program","urbanopt::reporting::defaultreports::qaqc","urbanopt::reporting::defaultreports::reportingperiod","urbanopt::reporting::defaultreports::scenariopowerdistribution","urbanopt::reporting::defaultreports::scenariopowerdistributioncost","urbanopt::reporting::defaultreports::scenarioreport","urbanopt::reporting::defaultreports::solarpv","urbanopt::reporting::defaultreports::storage","urbanopt::reporting::defaultreports::thermalstorage","urbanopt::reporting::defaultreports::timeseriescsv","urbanopt::reporting::defaultreports::validator","urbanopt::reporting::defaultreports::wind","urbanopt::reporting::extension","urbanopt::reporting::defaultreports::scenariopowerdistribution#add_capacitor()","urbanopt::reporting::defaultreports::scenariopowerdistributioncost#add_costs_per_equipment()","urbanopt::reporting::defaultreports::scenariopowerdistributioncost#add_equipment()","urbanopt::reporting::defaultreports::scenarioreport#add_feature_report()","urbanopt::reporting::defaultreports::generator::add_generator()","urbanopt::reporting::defaultreports::scenariopowerdistribution#add_line()","urbanopt::reporting::defaultreports::scenariopowerdistributioncost#add_outputs()","urbanopt::reporting::defaultreports::program#add_program()","urbanopt::reporting::defaultreports::solarpv::add_pv()","urbanopt::reporting::defaultreports::qaqc#add_qaqc_flags()","urbanopt::reporting::defaultreports::scenariopowerdistributioncost#add_result()","urbanopt::reporting::defaultreports::storage::add_storage()","urbanopt::reporting::defaultreports::scenariopowerdistribution#add_substation()","urbanopt::reporting::defaultreports::distributedgeneration#add_tech()","urbanopt::reporting::defaultreports::timeseriescsv#add_timeseries_csv()","urbanopt::reporting::defaultreports::enduse#add_values()","urbanopt::reporting::defaultreports::program#add_values()","urbanopt::reporting::defaultreports::reportingperiod::add_values()","urbanopt::reporting::defaultreports::scenariopowerdistributioncost#add_violation_summary()","urbanopt::reporting::defaultreports::wind::add_wind()","urbanopt::reporting::defaultreports::validator#csv_headers()","urbanopt::reporting::defaultreports::scenarioreport#csv_path()","urbanopt::reporting::defaultreports::constructioncost#defaults()","urbanopt::reporting::defaultreports::date#defaults()","urbanopt::reporting::defaultreports::enduse#defaults()","urbanopt::reporting::defaultreports::enduses#defaults()","urbanopt::reporting::defaultreports::featurereport#defaults()","urbanopt::reporting::defaultreports::location#defaults()","urbanopt::reporting::defaultreports::powerdistribution#defaults()","urbanopt::reporting::defaultreports::program#defaults()","urbanopt::reporting::defaultreports::qaqc#defaults()","urbanopt::reporting::defaultreports::reportingperiod#defaults()","urbanopt::reporting::defaultreports::scenariopowerdistribution#defaults()","urbanopt::reporting::defaultreports::scenariopowerdistributioncost#defaults()","urbanopt::reporting::defaultreports::scenarioreport#defaults()","urbanopt::reporting::defaultreports::thermalstorage#defaults()","urbanopt::reporting::defaultreports::timeseriescsv#defaults()","urbanopt::reporting::extension#doc_templates_dir()","urbanopt::reporting::defaultreports::validator#files_dir()","urbanopt::reporting::extension#files_dir()","urbanopt::reporting::defaultreports::featurereport::from_simulation_dir()","urbanopt::reporting::defaultreports::timeseriescsv#get_data()","urbanopt::reporting::defaultreports::scenarioreport#json_path()","urbanopt::reporting::defaultreports::timeseriescsv#load_data()","urbanopt::reporting::defaultreports::timeseriescsv#load_scenario_csv_schema_headers()","urbanopt::reporting::defaultreports::logger()","urbanopt::reporting::defaultreports::program#max_value()","urbanopt::reporting::extension#measures_dir()","urbanopt::reporting::defaultreports::constructioncost::merge_construction_cost()","urbanopt::reporting::defaultreports::constructioncost::merge_construction_costs()","urbanopt::reporting::defaultreports::distributedgeneration::merge_distributed_generation()","urbanopt::reporting::defaultreports::enduse#merge_end_use!()","urbanopt::reporting::defaultreports::enduses#merge_end_uses!()","urbanopt::reporting::defaultreports::powerdistribution#merge_power_distribution()","urbanopt::reporting::defaultreports::reportingperiod::merge_reporting_period()","urbanopt::reporting::defaultreports::reportingperiod::merge_reporting_periods()","urbanopt::reporting::defaultreports::thermalstorage::merge_thermal_storage()","urbanopt::reporting::defaultreports::constructioncost::new()","urbanopt::reporting::defaultreports::date::new()","urbanopt::reporting::defaultreports::distributedgeneration::new()","urbanopt::reporting::defaultreports::enduse::new()","urbanopt::reporting::defaultreports::enduses::new()","urbanopt::reporting::defaultreports::featurereport::new()","urbanopt::reporting::defaultreports::generator::new()","urbanopt::reporting::defaultreports::location::new()","urbanopt::reporting::defaultreports::powerdistribution::new()","urbanopt::reporting::defaultreports::program::new()","urbanopt::reporting::defaultreports::qaqc::new()","urbanopt::reporting::defaultreports::reportingperiod::new()","urbanopt::reporting::defaultreports::scenariopowerdistribution::new()","urbanopt::reporting::defaultreports::scenariopowerdistributioncost::new()","urbanopt::reporting::defaultreports::scenarioreport::new()","urbanopt::reporting::defaultreports::solarpv::new()","urbanopt::reporting::defaultreports::storage::new()","urbanopt::reporting::defaultreports::thermalstorage::new()","urbanopt::reporting::defaultreports::timeseriescsv::new()","urbanopt::reporting::defaultreports::validator::new()","urbanopt::reporting::defaultreports::wind::new()","urbanopt::reporting::extension::new()","urbanopt::reporting::defaultreports::timeseriescsv#reload_data()","urbanopt::reporting::defaultreports::timeseriescsv#run_dir_name()","urbanopt::reporting::defaultreports::featurereport#save()","urbanopt::reporting::defaultreports::scenarioreport#save()","urbanopt::reporting::defaultreports::featurereport#save_csv_report()","urbanopt::reporting::defaultreports::timeseriescsv#save_data()","urbanopt::reporting::defaultreports::featurereport#save_feature_report()","urbanopt::reporting::defaultreports::featurereport#save_json_report()","urbanopt::reporting::defaultreports::validator#schema()","urbanopt::reporting::defaultreports::validator#schema_file()","urbanopt::reporting::defaultreports::validator#schema_valid?()","urbanopt::reporting::defaultreports::validator#schema_validation_errors()","urbanopt::reporting::defaultreports::constructioncost#to_hash()","urbanopt::reporting::defaultreports::date#to_hash()","urbanopt::reporting::defaultreports::distributedgeneration#to_hash()","urbanopt::reporting::defaultreports::enduse#to_hash()","urbanopt::reporting::defaultreports::enduses#to_hash()","urbanopt::reporting::defaultreports::featurereport#to_hash()","urbanopt::reporting::defaultreports::generator#to_hash()","urbanopt::reporting::defaultreports::location#to_hash()","urbanopt::reporting::defaultreports::powerdistribution#to_hash()","urbanopt::reporting::defaultreports::program#to_hash()","urbanopt::reporting::defaultreports::qaqc#to_hash()","urbanopt::reporting::defaultreports::reportingperiod#to_hash()","urbanopt::reporting::defaultreports::scenariopowerdistribution#to_hash()","urbanopt::reporting::defaultreports::scenariopowerdistributioncost#to_hash()","urbanopt::reporting::defaultreports::scenarioreport#to_hash()","urbanopt::reporting::defaultreports::solarpv#to_hash()","urbanopt::reporting::defaultreports::storage#to_hash()","urbanopt::reporting::defaultreports::thermalstorage#to_hash()","urbanopt::reporting::defaultreports::timeseriescsv#to_hash()","urbanopt::reporting::defaultreports::wind#to_hash()","urbanopt::reporting::defaultreports::validator#validate()","","","","","",""],"info":[["URBANopt","","URBANopt.html","","<p>********************************************************************************* URBANopt (tm), Copyright …\n"],["URBANopt::Reporting","","URBANopt/Reporting.html","",""],["URBANopt::Reporting::DefaultReports","","URBANopt/Reporting/DefaultReports.html","",""],["URBANopt::Reporting::DefaultReports::ConstructionCost","","URBANopt/Reporting/DefaultReports/ConstructionCost.html","","<p>ConstructionCost include construction cost information.\n"],["URBANopt::Reporting::DefaultReports::Date","","URBANopt/Reporting/DefaultReports/Date.html","","<p>Date class include information of simulation run date.\n"],["URBANopt::Reporting::DefaultReports::DistributedGeneration","","URBANopt/Reporting/DefaultReports/DistributedGeneration.html","","<p>Onsite distributed generation system (i.e. SolarPV, Wind, Storage, Generator) design attributes and financial …\n"],["URBANopt::Reporting::DefaultReports::EndUse","","URBANopt/Reporting/DefaultReports/EndUse.html","","<p>Enduse class all enduse energy consumption results.\n"],["URBANopt::Reporting::DefaultReports::EndUses","","URBANopt/Reporting/DefaultReports/EndUses.html","","<p>Enduses class inlclude results for each fuel type.\n"],["URBANopt::Reporting::DefaultReports::FeatureReport","","URBANopt/Reporting/DefaultReports/FeatureReport.html","","<p>FeatureReport generates two types of reports in a simulation_dir. The default_feature_reports measure …\n"],["URBANopt::Reporting::DefaultReports::Generator","","URBANopt/Reporting/DefaultReports/Generator.html","","<p>Onsite generator system attributes\n"],["URBANopt::Reporting::DefaultReports::Location","","URBANopt/Reporting/DefaultReports/Location.html","","<p>Location include all location information.\n"],["URBANopt::Reporting::DefaultReports::PowerDistribution","","URBANopt/Reporting/DefaultReports/PowerDistribution.html","","<p>power_distributio include eletrical power distribution systems information.\n"],["URBANopt::Reporting::DefaultReports::Program","","URBANopt/Reporting/DefaultReports/Program.html","","<p>Program includes all building program related information.\n"],["URBANopt::Reporting::DefaultReports::QAQC","","URBANopt/Reporting/DefaultReports/QAQC.html","","<p>QAQC flags for each feature\n"],["URBANopt::Reporting::DefaultReports::ReportingPeriod","","URBANopt/Reporting/DefaultReports/ReportingPeriod.html","","<p>ReportingPeriod includes all the results of a specific reporting period.\n"],["URBANopt::Reporting::DefaultReports::ScenarioPowerDistribution","","URBANopt/Reporting/DefaultReports/ScenarioPowerDistribution.html","","<p>scenario_power_distribution include eletrical power distribution systems information.\n"],["URBANopt::Reporting::DefaultReports::ScenarioPowerDistributionCost","","URBANopt/Reporting/DefaultReports/ScenarioPowerDistributionCost.html","","<p>scenario_power_distribution_cost include eletrical power distribution system violation and upgrade cost …\n"],["URBANopt::Reporting::DefaultReports::ScenarioReport","","URBANopt/Reporting/DefaultReports/ScenarioReport.html","","<p>ScenarioReport can generate two types of reports from a scenario. The first is a JSON format saved to …\n"],["URBANopt::Reporting::DefaultReports::SolarPV","","URBANopt/Reporting/DefaultReports/SolarPV.html","","<p>Onsite solar PV system attributes\n"],["URBANopt::Reporting::DefaultReports::Storage","","URBANopt/Reporting/DefaultReports/Storage.html","","<p>Onsite storage system attributes\n"],["URBANopt::Reporting::DefaultReports::ThermalStorage","","URBANopt/Reporting/DefaultReports/ThermalStorage.html","","<p>Ice Thermal Storage Systems\n"],["URBANopt::Reporting::DefaultReports::TimeseriesCSV","","URBANopt/Reporting/DefaultReports/TimeseriesCSV.html","","<p>TimeseriesCSV include timesries reults reported in a CSV file.\n"],["URBANopt::Reporting::DefaultReports::Validator","","URBANopt/Reporting/DefaultReports/Validator.html","",""],["URBANopt::Reporting::DefaultReports::Wind","","URBANopt/Reporting/DefaultReports/Wind.html","","<p>Onsite wind system attributes\n"],["URBANopt::Reporting::Extension","","URBANopt/Reporting/Extension.html","",""],["add_capacitor","URBANopt::Reporting::DefaultReports::ScenarioPowerDistribution","URBANopt/Reporting/DefaultReports/ScenarioPowerDistribution.html#method-i-add_capacitor","(hash = {})","<p>Add a capacitor\n"],["add_costs_per_equipment","URBANopt::Reporting::DefaultReports::ScenarioPowerDistributionCost","URBANopt/Reporting/DefaultReports/ScenarioPowerDistributionCost.html#method-i-add_costs_per_equipment","()","<p>Add costs per equipment\n"],["add_equipment","URBANopt::Reporting::DefaultReports::ScenarioPowerDistributionCost","URBANopt/Reporting/DefaultReports/ScenarioPowerDistributionCost.html#method-i-add_equipment","()","<p>Add equipment\n"],["add_feature_report","URBANopt::Reporting::DefaultReports::ScenarioReport","URBANopt/Reporting/DefaultReports/ScenarioReport.html#method-i-add_feature_report","(feature_report)","<p>Add feature reports to each other.\n<p>check if a feature report have been already added.\n<p>check feature simulation …\n"],["add_generator","URBANopt::Reporting::DefaultReports::Generator","URBANopt/Reporting/DefaultReports/Generator.html#method-c-add_generator","(existing_generator, new_generator)","<p>Merge Generator systems\n"],["add_line","URBANopt::Reporting::DefaultReports::ScenarioPowerDistribution","URBANopt/Reporting/DefaultReports/ScenarioPowerDistribution.html#method-i-add_line","(hash = {})","<p>Add a line\n"],["add_outputs","URBANopt::Reporting::DefaultReports::ScenarioPowerDistributionCost","URBANopt/Reporting/DefaultReports/ScenarioPowerDistributionCost.html#method-i-add_outputs","(hash = {})","<p>Add outputs\n"],["add_program","URBANopt::Reporting::DefaultReports::Program","URBANopt/Reporting/DefaultReports/Program.html#method-i-add_program","(other)","<p>Merges program objects to each other by summing up values or taking the maximum value of the attributes. …\n"],["add_pv","URBANopt::Reporting::DefaultReports::SolarPV","URBANopt/Reporting/DefaultReports/SolarPV.html#method-c-add_pv","(existing_pv, new_pv)","<p>Merge PV systems\n"],["add_qaqc_flags","URBANopt::Reporting::DefaultReports::QAQC","URBANopt/Reporting/DefaultReports/QAQC.html#method-i-add_qaqc_flags","(other)","<p>Merges qaqc_flags objects to each other by summing up values.\n<p>parameters: &mdash; <code>other</code> - <em>QAQC</em> - An object of …\n\n"],["add_result","URBANopt::Reporting::DefaultReports::ScenarioPowerDistributionCost","URBANopt/Reporting/DefaultReports/ScenarioPowerDistributionCost.html#method-i-add_result","(hash = {})","<p>Add a result\n"],["add_storage","URBANopt::Reporting::DefaultReports::Storage","URBANopt/Reporting/DefaultReports/Storage.html#method-c-add_storage","(existing_storage, new_storage)","<p>Merge Storage systems\n"],["add_substation","URBANopt::Reporting::DefaultReports::ScenarioPowerDistribution","URBANopt/Reporting/DefaultReports/ScenarioPowerDistribution.html#method-i-add_substation","(hash = {})","<p>Add a substation\n"],["add_tech","URBANopt::Reporting::DefaultReports::DistributedGeneration","URBANopt/Reporting/DefaultReports/DistributedGeneration.html#method-i-add_tech","(name, tech)","<p>Add a tech\n"],["add_timeseries_csv","URBANopt::Reporting::DefaultReports::TimeseriesCSV","URBANopt/Reporting/DefaultReports/TimeseriesCSV.html#method-i-add_timeseries_csv","(other)","<p>Merges timeseries csv to each other.\n<p>initialize first_report_datetime with the incoming first_report_datetime …\n"],["add_values","URBANopt::Reporting::DefaultReports::EndUse","URBANopt/Reporting/DefaultReports/EndUse.html#method-i-add_values","(existing_value, new_value)","<p>Adds up <code>existing_value</code> and <code>new_values</code> if not nill.\n<p>parameter: &mdash; <code>existing_value</code> - <em>Float</em> - A value corresponding …\n"],["add_values","URBANopt::Reporting::DefaultReports::Program","URBANopt/Reporting/DefaultReports/Program.html#method-i-add_values","(existing_value, new_value)","<p>Adds up <code>existing_value</code> and <code>new_values</code> if not nill.\n<p>parameters: &mdash; <code>existing_value</code> - <em>Float</em> - A value corresponding …\n"],["add_values","URBANopt::Reporting::DefaultReports::ReportingPeriod","URBANopt/Reporting/DefaultReports/ReportingPeriod.html#method-c-add_values","(existing_value, new_value)","<p>Adds up <code>existing_value</code> and <code>new_values</code> if not nill.\n<p>parameter: &mdash; <code>existing_value</code> - <em>Float</em> - A value corresponding …\n"],["add_violation_summary","URBANopt::Reporting::DefaultReports::ScenarioPowerDistributionCost","URBANopt/Reporting/DefaultReports/ScenarioPowerDistributionCost.html#method-i-add_violation_summary","(hash = {})","<p>Add a violation summary\n"],["add_wind","URBANopt::Reporting::DefaultReports::Wind","URBANopt/Reporting/DefaultReports/Wind.html#method-c-add_wind","(existing_wind, new_wind)","<p>Merge Wind systems\n"],["csv_headers","URBANopt::Reporting::DefaultReports::Validator","URBANopt/Reporting/DefaultReports/Validator.html#method-i-csv_headers","()","<p>get csv headers from csv schema\n"],["csv_path","URBANopt::Reporting::DefaultReports::ScenarioReport","URBANopt/Reporting/DefaultReports/ScenarioReport.html#method-i-csv_path","()","<p>Gets the saved CSV file path.\n"],["defaults","URBANopt::Reporting::DefaultReports::ConstructionCost","URBANopt/Reporting/DefaultReports/ConstructionCost.html#method-i-defaults","()","<p>Assigns default values if attribute values do not exist.\n"],["defaults","URBANopt::Reporting::DefaultReports::Date","URBANopt/Reporting/DefaultReports/Date.html#method-i-defaults","()","<p>Assigns default values if values do not exist.\n"],["defaults","URBANopt::Reporting::DefaultReports::EndUse","URBANopt/Reporting/DefaultReports/EndUse.html#method-i-defaults","()","<p>Assign default values if values does not exist\n"],["defaults","URBANopt::Reporting::DefaultReports::EndUses","URBANopt/Reporting/DefaultReports/EndUses.html#method-i-defaults","()","<p>Assigns default values if values do not exist.\n"],["defaults","URBANopt::Reporting::DefaultReports::FeatureReport","URBANopt/Reporting/DefaultReports/FeatureReport.html#method-i-defaults","()","<p>Assign default values if values does not exist.\n"],["defaults","URBANopt::Reporting::DefaultReports::Location","URBANopt/Reporting/DefaultReports/Location.html#method-i-defaults","()","<p>Assign default values if values does not exist\n"],["defaults","URBANopt::Reporting::DefaultReports::PowerDistribution","URBANopt/Reporting/DefaultReports/PowerDistribution.html#method-i-defaults","()","<p>Assigns default values if attribute values do not exist.\n"],["defaults","URBANopt::Reporting::DefaultReports::Program","URBANopt/Reporting/DefaultReports/Program.html#method-i-defaults","()","<p>Assigns default values if values do not exist.\n"],["defaults","URBANopt::Reporting::DefaultReports::QAQC","URBANopt/Reporting/DefaultReports/QAQC.html#method-i-defaults","()","<p>Assigns default values if values do not exist.\n"],["defaults","URBANopt::Reporting::DefaultReports::ReportingPeriod","URBANopt/Reporting/DefaultReports/ReportingPeriod.html#method-i-defaults","()","<p>Assigns default values if values do not exist.\n"],["defaults","URBANopt::Reporting::DefaultReports::ScenarioPowerDistribution","URBANopt/Reporting/DefaultReports/ScenarioPowerDistribution.html#method-i-defaults","()","<p>Assigns default values if attribute values do not exist.\n"],["defaults","URBANopt::Reporting::DefaultReports::ScenarioPowerDistributionCost","URBANopt/Reporting/DefaultReports/ScenarioPowerDistributionCost.html#method-i-defaults","()","<p>Assigns default values if attribute values do not exist.##\n"],["defaults","URBANopt::Reporting::DefaultReports::ScenarioReport","URBANopt/Reporting/DefaultReports/ScenarioReport.html#method-i-defaults","()","<p>Assigns default values if values do not exist.\n"],["defaults","URBANopt::Reporting::DefaultReports::ThermalStorage","URBANopt/Reporting/DefaultReports/ThermalStorage.html#method-i-defaults","()","<p>Assigns default values if attribute values do not exist.\n"],["defaults","URBANopt::Reporting::DefaultReports::TimeseriesCSV","URBANopt/Reporting/DefaultReports/TimeseriesCSV.html#method-i-defaults","()","<p>Assigns default values if values does not exist.\n"],["doc_templates_dir","URBANopt::Reporting::Extension","URBANopt/Reporting/Extension.html#method-i-doc_templates_dir","()","<p>The directory containing common files like copyright and license notices which are used to update measures …\n"],["files_dir","URBANopt::Reporting::DefaultReports::Validator","URBANopt/Reporting/DefaultReports/Validator.html#method-i-files_dir","()","<p>Return the absolute path of the default reports files\n"],["files_dir","URBANopt::Reporting::Extension","URBANopt/Reporting/Extension.html#method-i-files_dir","()","<p>The directory containign relevant files such as weather data, design days, etc. The method returns nil …\n"],["from_simulation_dir","URBANopt::Reporting::DefaultReports::FeatureReport","URBANopt/Reporting/DefaultReports/FeatureReport.html#method-c-from_simulation_dir","(simulation_dir)","<p>Return an Array of FeatureReports for the simulation_dir as multiple Features can be simulated together …\n"],["get_data","URBANopt::Reporting::DefaultReports::TimeseriesCSV","URBANopt/Reporting/DefaultReports/TimeseriesCSV.html#method-i-get_data","(column_name)","<p>Gets data for each column name in the CSV file.\n<p>parameters: &mdash; <code>column_name</code> - <em>String</em> - The header of each …\n\n"],["json_path","URBANopt::Reporting::DefaultReports::ScenarioReport","URBANopt/Reporting/DefaultReports/ScenarioReport.html#method-i-json_path","()","<p>Gets the saved JSON file path.\n"],["load_data","URBANopt::Reporting::DefaultReports::TimeseriesCSV","URBANopt/Reporting/DefaultReports/TimeseriesCSV.html#method-i-load_data","()","<p>Loads data from the CSV file.\n"],["load_scenario_csv_schema_headers","URBANopt::Reporting::DefaultReports::TimeseriesCSV","URBANopt/Reporting/DefaultReports/TimeseriesCSV.html#method-i-load_scenario_csv_schema_headers","()","<p>load required scenario report csv headers from reports schema\n"],["logger","URBANopt::Reporting::DefaultReports","URBANopt/Reporting/DefaultReports.html#method-c-logger","()","<p>Definining class variable “@@logger” to log errors, info and warning messages.\n"],["max_value","URBANopt::Reporting::DefaultReports::Program","URBANopt/Reporting/DefaultReports/Program.html#method-i-max_value","(existing_value, new_value)","<p>Return the maximum value from <code>existing_value</code> and <code>new_value</code>.\n<p>parameters: &mdash; <code>existing_value</code> - <em>Float</em> - A value …\n"],["measures_dir","URBANopt::Reporting::Extension","URBANopt/Reporting/Extension.html#method-i-measures_dir","()","<p>Returns the absolute path of the measures or returns nil, in case no measures are added. It can be used …\n"],["merge_construction_cost","URBANopt::Reporting::DefaultReports::ConstructionCost","URBANopt/Reporting/DefaultReports/ConstructionCost.html#method-c-merge_construction_cost","(existing_cost, new_cost)","<p>Merges an <code>existing_cost</code> with a <code>new_cost</code>:\n<p>modify the existing_cost by summing the <code>:total_cost</code> and <code>:item_quantity</code> …\n"],["merge_construction_costs","URBANopt::Reporting::DefaultReports::ConstructionCost","URBANopt/Reporting/DefaultReports/ConstructionCost.html#method-c-merge_construction_costs","(existing_costs, new_costs)","<p>Merges muliple construction costs together.\n<p>loops over the new_costs and find the index of the cost with …\n"],["merge_distributed_generation","URBANopt::Reporting::DefaultReports::DistributedGeneration","URBANopt/Reporting/DefaultReports/DistributedGeneration.html#method-c-merge_distributed_generation","(existing_dgen, new_dgen)","<p>Merge a distributed generation system with a new system\n"],["merge_end_use!","URBANopt::Reporting::DefaultReports::EndUse","URBANopt/Reporting/DefaultReports/EndUse.html#method-i-merge_end_use-21","(other)","<p>Aggregate values of each EndUse attribute.\n<p>Parameters: &mdash; <code>other</code> - <em>EndUse</em> - An object of EndUse class.\n\n"],["merge_end_uses!","URBANopt::Reporting::DefaultReports::EndUses","URBANopt/Reporting/DefaultReports/EndUses.html#method-i-merge_end_uses-21","(new_end_uses)","<p>Aggregates the values of each EndUse attribute.\n<p>Parameters: &mdash; <code>new_end_uses</code> - <em>EndUses</em> - An object of EndUses …\n\n"],["merge_power_distribution","URBANopt::Reporting::DefaultReports::PowerDistribution","URBANopt/Reporting/DefaultReports/PowerDistribution.html#method-i-merge_power_distribution","()","<p>Merges muliple power distribution results together.\n<p><code>new_costs</code> - <em>Array</em> - An array of ConstructionCost objects. …\n"],["merge_reporting_period","URBANopt::Reporting::DefaultReports::ReportingPeriod","URBANopt/Reporting/DefaultReports/ReportingPeriod.html#method-c-merge_reporting_period","(existing_period, new_period)","<p>Merges an <code>existing_period</code> with a <code>new_period</code> if not nil.\n<p>Parameters: &mdash; <code>existing_period</code> - <em>ReportingPeriod</em> …\n"],["merge_reporting_periods","URBANopt::Reporting::DefaultReports::ReportingPeriod","URBANopt/Reporting/DefaultReports/ReportingPeriod.html#method-c-merge_reporting_periods","(existing_periods, new_periods)","<p>Merges multiple reporting periods together.\n<p>If <code>existing_periods</code> and <code>new_periods</code> ids are equal,\n\n<p>modify the …\n"],["merge_thermal_storage","URBANopt::Reporting::DefaultReports::ThermalStorage","URBANopt/Reporting/DefaultReports/ThermalStorage.html#method-c-merge_thermal_storage","(existing_tes, new_tes)","<p>Merge thermal storage\n"],["new","URBANopt::Reporting::DefaultReports::ConstructionCost","URBANopt/Reporting/DefaultReports/ConstructionCost.html#method-c-new","(hash = {})","<p>ConstructionCost class intialize all construction_cost attributes: <code>:category</code> , <code>:item_name</code> , <code>:unit_cost</code> …\n"],["new","URBANopt::Reporting::DefaultReports::Date","URBANopt/Reporting/DefaultReports/Date.html#method-c-new","(hash = {})","<p>Date class intialize all date attributes: <code>:month</code> , <code>:day_of_month</code> , <code>:year</code>\n<p>parameters: &mdash; <code>hash</code> - <em>Hash</em> - A hash …\n\n"],["new","URBANopt::Reporting::DefaultReports::DistributedGeneration","URBANopt/Reporting/DefaultReports/DistributedGeneration.html#method-c-new","(hash = {})","<p>Initialize distributed generation system design and financial metrics.\n<p>Technologies include <code>:solar_pv</code> …\n"],["new","URBANopt::Reporting::DefaultReports::EndUse","URBANopt/Reporting/DefaultReports/EndUse.html#method-c-new","(hash = {})","<p>EndUse class intialize all enduse atributes: <code>:heating</code> , <code>:cooling</code> , <code>:interior_lighting</code> , <code>:exterior_lighting</code> …\n"],["new","URBANopt::Reporting::DefaultReports::EndUses","URBANopt/Reporting/DefaultReports/EndUses.html#method-c-new","(hash = {})","<p>EndUses class intialize end_uses(fuel type) attributes: <code>:electricity_kwh</code> , <code>:natural_gas_kwh</code> , <code>:propane_kwh</code> …\n"],["new","URBANopt::Reporting::DefaultReports::FeatureReport","URBANopt/Reporting/DefaultReports/FeatureReport.html#method-c-new","(hash = {})","<p>Each FeatureReport object corresponds to a single Feature.\n<p>parameters: &mdash; <code>hash</code> - <em>Hash</em> - A hash which may …\n\n"],["new","URBANopt::Reporting::DefaultReports::Generator","URBANopt/Reporting/DefaultReports/Generator.html#method-c-new","(hash = {})","<p>Intialize Generator attributes from a hash. Generator attributes currently are limited to power capacity. …\n"],["new","URBANopt::Reporting::DefaultReports::Location","URBANopt/Reporting/DefaultReports/Location.html#method-c-new","(hash = {})","<p>Location class initialize location attributes: <code>:latitude_deg</code> , <code>:longitude_deg</code> , <code>:surface_elevation_ft</code> …\n"],["new","URBANopt::Reporting::DefaultReports::PowerDistribution","URBANopt/Reporting/DefaultReports/PowerDistribution.html#method-c-new","(hash = {})","<p>PowerDistribution class initialize all power_distribution attributes: <code>:under_voltage_hours</code> , <code>:over_voltage_hours</code> …\n"],["new","URBANopt::Reporting::DefaultReports::Program","URBANopt/Reporting/DefaultReports/Program.html#method-c-new","(hash = {})","<p>Program class initialize building program attributes: <code>:site_area_sqft</code> , <code>:floor_area_sqft</code> , <code>:conditioned_area_sqft</code> …\n"],["new","URBANopt::Reporting::DefaultReports::QAQC","URBANopt/Reporting/DefaultReports/QAQC.html#method-c-new","(hash = {})","<p>QAQC class initialize quaqc attributes: <code>:eui_reasonableness,</code>:end_use_by_category,+:mechanical_system_part_load_efficiency, …\n"],["new","URBANopt::Reporting::DefaultReports::ReportingPeriod","URBANopt/Reporting/DefaultReports/ReportingPeriod.html#method-c-new","(hash = {})","<p>ReportingPeriod class initializes the reporting period attributes: <code>:id</code> , <code>:name</code> , <code>:multiplier</code> , <code>:start_date</code> …\n"],["new","URBANopt::Reporting::DefaultReports::ScenarioPowerDistribution","URBANopt/Reporting/DefaultReports/ScenarioPowerDistribution.html#method-c-new","(hash = {})","<p>ScenarioPowerDistribution class initialize all scenario_power_distribution attributes: <code>:substations</code> , …\n"],["new","URBANopt::Reporting::DefaultReports::ScenarioPowerDistributionCost","URBANopt/Reporting/DefaultReports/ScenarioPowerDistributionCost.html#method-c-new","(hash = {})","<p>ScenarioPowerDistributionCost class initializes all scenario_power_distribution_cost attributes: <code>:results</code> …\n"],["new","URBANopt::Reporting::DefaultReports::ScenarioReport","URBANopt/Reporting/DefaultReports/ScenarioReport.html#method-c-new","(hash = {})","<p>ScenarioReport class intializes the scenario report attributes: <code>:id</code> , <code>:name</code> , <code>:directory_name</code>, <code>:timesteps_per_hour</code> …\n"],["new","URBANopt::Reporting::DefaultReports::SolarPV","URBANopt/Reporting/DefaultReports/SolarPV.html#method-c-new","(hash = {})","<p>Initialize SolarPV attributes from a hash. Solar PV attributes currently are limited to power capacity. …\n"],["new","URBANopt::Reporting::DefaultReports::Storage","URBANopt/Reporting/DefaultReports/Storage.html#method-c-new","(hash = {})","<p>Initialize Storage attributes from a hash. Storage attributes currently are limited to power and storage …\n"],["new","URBANopt::Reporting::DefaultReports::ThermalStorage","URBANopt/Reporting/DefaultReports/ThermalStorage.html#method-c-new","(hash = {})",""],["new","URBANopt::Reporting::DefaultReports::TimeseriesCSV","URBANopt/Reporting/DefaultReports/TimeseriesCSV.html#method-c-new","(hash = {})","<p>TimeseriesCSV class initializes timeseries csv attributes: <code>:path</code> , <code>:first_report_datetime</code> , <code>:column_names</code> …\n"],["new","URBANopt::Reporting::DefaultReports::Validator","URBANopt/Reporting/DefaultReports/Validator.html#method-c-new","()","<p>Initialize the root directory\n"],["new","URBANopt::Reporting::DefaultReports::Wind","URBANopt/Reporting/DefaultReports/Wind.html#method-c-new","(hash = {})","<p>Initialize Wind attributes from a hash. Wind attributes currently are limited to power capacity.\n<p>parameters: … &mdash; \n"],["new","URBANopt::Reporting::Extension","URBANopt/Reporting/Extension.html#method-c-new","()","<p>Override the base class\n"],["reload_data","URBANopt::Reporting::DefaultReports::TimeseriesCSV","URBANopt/Reporting/DefaultReports/TimeseriesCSV.html#method-i-reload_data","(new_data)","<p>Reloads data from the CSV file.\n"],["run_dir_name","URBANopt::Reporting::DefaultReports::TimeseriesCSV","URBANopt/Reporting/DefaultReports/TimeseriesCSV.html#method-i-run_dir_name","(name)","<p>Gets run directory.\n<p>parameters: &mdash; <code>name</code> - <em>String</em> - The name of the scenario (<code>directory_name</code>).\n\n"],["save","URBANopt::Reporting::DefaultReports::FeatureReport","URBANopt/Reporting/DefaultReports/FeatureReport.html#method-i-save","(file_name = 'default_feature_report')","<p>Saves the &#39;default_feature_report.json&#39; and &#39;default_feature_report.csv&#39; files\n<p>[parameters]: …\n"],["save","URBANopt::Reporting::DefaultReports::ScenarioReport","URBANopt/Reporting/DefaultReports/ScenarioReport.html#method-i-save","(file_name = 'default_scenario_report', save_feature_reports = true, save_csv_reports = true)","<p>Saves the &#39;default_scenario_report.json&#39; and &#39;default_scenario_report.csv&#39; files\n<p>[parameters]: …\n"],["save_csv_report","URBANopt::Reporting::DefaultReports::FeatureReport","URBANopt/Reporting/DefaultReports/FeatureReport.html#method-i-save_csv_report","(file_name = 'default_feature_report')","<p>Saves the &#39;default_feature_report.csv&#39; file to the results directory This method only copies …\n"],["save_data","URBANopt::Reporting::DefaultReports::TimeseriesCSV","URBANopt/Reporting/DefaultReports/TimeseriesCSV.html#method-i-save_data","(path = nil)","<p>Saves data to the the scenario report CSV file.\n<p>parameters: &mdash; <code>path</code> - <em>String</em> - The path of the scenario report …\n\n"],["save_feature_report","URBANopt::Reporting::DefaultReports::FeatureReport","URBANopt/Reporting/DefaultReports/FeatureReport.html#method-i-save_feature_report","(file_name = 'default_feature_report')","<p>Calls the individual functions to save &#39;default_feature_report.json&#39; and &#39;default_feature_report.csv&#39; …\n"],["save_json_report","URBANopt::Reporting::DefaultReports::FeatureReport","URBANopt/Reporting/DefaultReports/FeatureReport.html#method-i-save_json_report","(file_name = 'default_feature_report')","<p>Saves the &#39;default_feature_report.json&#39; file to the results directory\n<p>[parameters]: <code>file_name</code> …\n"],["schema","URBANopt::Reporting::DefaultReports::Validator","URBANopt/Reporting/DefaultReports/Validator.html#method-i-schema","()","<p>return schema\n"],["schema_file","URBANopt::Reporting::DefaultReports::Validator","URBANopt/Reporting/DefaultReports/Validator.html#method-i-schema_file","()","<p>return path to schema file\n"],["schema_valid?","URBANopt::Reporting::DefaultReports::Validator","URBANopt/Reporting/DefaultReports/Validator.html#method-i-schema_valid-3F","()","<p>check if the schema is valid\n"],["schema_validation_errors","URBANopt::Reporting::DefaultReports::Validator","URBANopt/Reporting/DefaultReports/Validator.html#method-i-schema_validation_errors","()","<p>return detailed schema validation errors\n"],["to_hash","URBANopt::Reporting::DefaultReports::ConstructionCost","URBANopt/Reporting/DefaultReports/ConstructionCost.html#method-i-to_hash","()","<p>Converts to a Hash equivalent for JSON serialization.\n<p>Exclude attributes with nil values.\n<p>Validate construct_cost …\n"],["to_hash","URBANopt::Reporting::DefaultReports::Date","URBANopt/Reporting/DefaultReports/Date.html#method-i-to_hash","()","<p>Converts to a hash equivalent for JSON serialization.\n<p>Exclude attributes with nil values.\n<p>Validate date …\n"],["to_hash","URBANopt::Reporting::DefaultReports::DistributedGeneration","URBANopt/Reporting/DefaultReports/DistributedGeneration.html#method-i-to_hash","()","<p>Convert to a Hash equivalent for JSON serialization\n"],["to_hash","URBANopt::Reporting::DefaultReports::EndUse","URBANopt/Reporting/DefaultReports/EndUse.html#method-i-to_hash","()","<p>Convert to a Hash equivalent for JSON serialization.\n<p>Exclude attributes with nil values.\n<p>Validate end_use …\n"],["to_hash","URBANopt::Reporting::DefaultReports::EndUses","URBANopt/Reporting/DefaultReports/EndUses.html#method-i-to_hash","()","<p>Converts to a Hash equivalent for JSON serialization.\n<p>Exclude attributes with nil values.\n<p>Validate end_uses …\n"],["to_hash","URBANopt::Reporting::DefaultReports::FeatureReport","URBANopt/Reporting/DefaultReports/FeatureReport.html#method-i-to_hash","()","<p>Convert to a Hash equivalent for JSON serialization\n<p>Exclude attributes with nil values.\n<p>Validate feature_report …\n"],["to_hash","URBANopt::Reporting::DefaultReports::Generator","URBANopt/Reporting/DefaultReports/Generator.html#method-i-to_hash","()","<p>Convert to a Hash equivalent for JSON serialization\n"],["to_hash","URBANopt::Reporting::DefaultReports::Location","URBANopt/Reporting/DefaultReports/Location.html#method-i-to_hash","()","<p>Convert to a Hash equivalent for JSON serialization.\n<p>Exclude attributes with nil values.\n<p>Validate location …\n"],["to_hash","URBANopt::Reporting::DefaultReports::PowerDistribution","URBANopt/Reporting/DefaultReports/PowerDistribution.html#method-i-to_hash","()","<p>Converts to a Hash equivalent for JSON serialization.\n<p>Exclude attributes with nil values.\n<p>Validate power_distribution …\n"],["to_hash","URBANopt::Reporting::DefaultReports::Program","URBANopt/Reporting/DefaultReports/Program.html#method-i-to_hash","()","<p>Convert to a Hash equivalent for JSON serialization.\n<p>Exclude attributes with nil values.\n<p>Validate program …\n"],["to_hash","URBANopt::Reporting::DefaultReports::QAQC","URBANopt/Reporting/DefaultReports/QAQC.html#method-i-to_hash","()","<p>Convert to a Hash equivalent for JSON serialization\n"],["to_hash","URBANopt::Reporting::DefaultReports::ReportingPeriod","URBANopt/Reporting/DefaultReports/ReportingPeriod.html#method-i-to_hash","()","<p>Converts to a Hash equivalent for JSON serialization.\n<p>Exclude attributes with nil values.\n<p>Validate reporting_period …\n"],["to_hash","URBANopt::Reporting::DefaultReports::ScenarioPowerDistribution","URBANopt/Reporting/DefaultReports/ScenarioPowerDistribution.html#method-i-to_hash","()","<p>Converts to a Hash equivalent for JSON serialization.\n<p>Exclude attributes with nil values.\n<p>Validate power_distribution …\n"],["to_hash","URBANopt::Reporting::DefaultReports::ScenarioPowerDistributionCost","URBANopt/Reporting/DefaultReports/ScenarioPowerDistributionCost.html#method-i-to_hash","()","<p>Converts to a Hash equivalent for JSON serialization.\n<p>Exclude attributes with nil values.\n<p>Validate power_distribution_cost …\n"],["to_hash","URBANopt::Reporting::DefaultReports::ScenarioReport","URBANopt/Reporting/DefaultReports/ScenarioReport.html#method-i-to_hash","()","<p>Converts to a Hash equivalent for JSON serialization.\n<p>Exclude attributes with nil values.\n<p>Validate reporting_period …\n"],["to_hash","URBANopt::Reporting::DefaultReports::SolarPV","URBANopt/Reporting/DefaultReports/SolarPV.html#method-i-to_hash","()","<p>Convert to a Hash equivalent for JSON serialization\n"],["to_hash","URBANopt::Reporting::DefaultReports::Storage","URBANopt/Reporting/DefaultReports/Storage.html#method-i-to_hash","()","<p>Convert to a Hash equivalent for JSON serialization\n"],["to_hash","URBANopt::Reporting::DefaultReports::ThermalStorage","URBANopt/Reporting/DefaultReports/ThermalStorage.html#method-i-to_hash","()","<p>Convert to hash equivalent for JSON serialization\n"],["to_hash","URBANopt::Reporting::DefaultReports::TimeseriesCSV","URBANopt/Reporting/DefaultReports/TimeseriesCSV.html#method-i-to_hash","()","<p>Converts to a Hash equivalent for JSON serialization.\n<p>Exclude attributes with nil values.\n<p>Validate reporting_period …\n"],["to_hash","URBANopt::Reporting::DefaultReports::Wind","URBANopt/Reporting/DefaultReports/Wind.html#method-i-to_hash","()","<p>Convert to a Hash equivalent for JSON serialization\n"],["validate","URBANopt::Reporting::DefaultReports::Validator","URBANopt/Reporting/DefaultReports/Validator.html#method-i-validate","(schema, data)","<p>validate data against schema\n<p>parameters: &mdash; <code>schema</code> - <em>Hash</em> - A hash of the JSON scenario_schema. <code>data</code> - <em>Hash</em> …\n\n"],["CHANGELOG","","CHANGELOG_md.html","","<p>URBANopt Reporting Gem\n<p>Version 0.8.0\n<p>Date Range: 12/12/22 - 6/30/23\n"],["CONTRIBUTING","","CONTRIBUTING_md.html","","<p>URBANopt Contribution Policy\n<p>Version 1.0\n<p>The URBANopt&lt;sup&gt;™&lt;/sup&gt; team welcomes your contribution …\n"],["RDOC_MAIN","","RDOC_MAIN_md.html","","<p>URBANopt Reporting Gem\n<p>back to main docs\n<p>The URBANopt™ Reporting Gem defines the URBANopt Scenario report …\n"],["building_loads.csv","","building_loads_csv.html","","<p>Date Time,Month,Day,Day of Week,Hour,Minute,SecondsFromStart 01/01/2006 00:10,1,1,0,0,10,600 01/01/2006 …\n"],["scenario_csv_columns","","lib/urbanopt/reporting/default_reports/schema/scenario_csv_columns_txt.html","","<p>Datetime Electricity:Facility ElectricityProduced:Facility NaturalGas:Facility Propane:Facility FuelOilNo2:Facility …\n"],["scenario_schema.json","","lib/urbanopt/reporting/default_reports/schema/scenario_schema_json.html","","<p>{\n\n<pre>&quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,\n&quot;description&quot;: &quot;Comment describing your JSON Schema&quot;, ...</pre>\n"]]}}